{"version":3,"sources":["logo.svg","App.js","class/StopWatchDisplay.jsx","class/StopWatchHistory.jsx","class/StopWatch.js","reportWebVitals.js","index.js"],"names":["Loading","App","React","Component","useState","hits","data","setData","query","setQuery","useEffect","completed","a","axios","result","get","value","onChange","e","target","map","item","href","url","title","author","created_at","StopWatchDisplay","className","this","props","formatTime","currentTimeMin","currentTimeSec","currentTimeMs","StopWatchHistory","setHistoryState","localStorage","times","setState","history","split","saveToLocalStorage","Date","toString","saveTime","Storage","console","error","resetHistory","removeItem","state","onClick","index","StopWatch","val","length","start","running","watch","setInterval","pace","stop","clearInterval","reset","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e14db5f6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport './App.css';\n\nconst Head = props => <h1>{props.title}</h1>\nconst Loading = () => <div>Loading...</div>\n \nclass LoadingCompoment extends React.Component {\n  constructor(props) {\n      super(props)\n      this.state = {\n        loading: false\n      }\n  }\n\n  comment() {\n    const con = 1\n    const res = con > 0 ? true : false;\n \n    //const and = loading  && (<div>loading....</div>)\n  }\n \n  render() {\n    const {loading} = this.state\n\n    return (\n      <>\n        {          \n          loading ? <Loading /> : <div>this is webPage</div>\n          //loading && <Loading />\n          //<div>12345</div>\n        }\n      </>\n    )    \n  } \n}\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {date:new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(), 1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>hello</h1>        \n        <h2>\n          {this.state.date.toLocaleTimeString()}\n        </h2>\n      </div>\n    )\n  }  \n}\n\n// ReactDOM.render(\n//   <Clock />,\n//   document.getElementById(\"root\")\n// )\n\n \nclass LifeCycle extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  // 렌더링 이전\n  componentWillMount() {\n\n  }\n\n  // 렌더링 이후\n  componentDidMount() {\n\n  }\n\n  // 렌더링 삭제\n  componentWillUnmount() {\n \n  } \n\n  render() {\n    return (<></>)\n  }\n}\n \nclass Fast extends React.Component {\n  constructor(props) {\n    super(props)\n \n    this.state = {\n      props,\n      date: new Date()\n    }\n  }\n \n  render() {\n    const { props, date} = this.state \n\n    return (\n      <>\n        {\n          <div>{date.toLocaleDateString()}</div>          \n        }\n      </>\n    )    \n  } \n}\n\nclass Timer extends React.Component {  \n\n  constructor(props) {\n    super(props)    \n    this.state = {\n      time : new Date(),\n      front : \"react\"\n    }\n\n    this.value = \"2\"    \n  }\n    \n  componentDidMount() {\n    this.tick()\n  }\n  \n  tick() {\n    this.setState({\n      time : new Date(),\n      front : \"react.js\"\n    }, () => {\n      //console.log(this.state.time)\n      //console.log(this.state.front)\n      }    \n    )    \n  }  \n  \n  render() {\n    const {time , front} = this.state\n    let {v} = this.value  \n    return (\n      <>\n        <div>        \n        {time.toLocaleTimeString()}\n        <br/>\n        {front}\n        <br/>\n        {v}\n        </div>\n      </>\n    )    \n  }\n\n}\n\nconst Todo = ({ todo, index, completeTodo, removeTodo }) => {\n  return (\n    <>\n    <div\n      className=\"todo\"\n      style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}\n    >\n        <font color=\"black\">{todo.text}</font>\n    </div>\n\n    <div>\n      <button onClick={() => completeTodo(index)}>Complete</button> \n      <button onClick={() => removeTodo(index)}>X</button>\n    </div>\n    </>\n  )\n}\n\nconst TodoForm = ({ addTodo }) => {\n  const [value, setValue] = useState(\"\")\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;    \n    addTodo(value, new Date().toLocaleTimeString() + new Date().getMilliseconds())\n    setValue(\"\")\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  )\n}\n\nconst App = () => {\n  const [data, setData] = useState({ hits: [] })\n  const [query, setQuery] = useState(\"react\")\n  \n  useEffect(() => {\n    let completed = false\n\n    async function get() {\n      const result = await axios('https://hn.algolia.com/api/v1/search?query=' + query)\n      if (!completed) setData(result.data)\n    }\n\n    if (query != \"\") get()\n    return () => {\n      completed = true\n    }\n  }, [query])\n\n  return (\n    <>\n    <input value={query} onChange={e => setQuery(e.target.value)}></input>\n    <ul>\n      {\n        data.hits.map(item => (\n          <li key={item.created_at}>\n            <a href={item.url} target='_blank'>{item.title} - {item.author}</a>\n          </li>\n        ))\n      }      \n    </ul>\n    </>\n  )\n}\n\n// const App = () => {\n//   const [count, setCount] = useState(0)\n//   const [todo, setTodo] = useState([])  \n\n//   const addTodo = (text, nKey) => {\n//     const newTodos = [...todo, {text, nKey}]    \n//     setTodo(newTodos)\n//   }\n\n//   const completeTodo = index => {\n//     const newTodos = [...todo]\n//     newTodos[index].isCompleted = true\n//     setTodo(newTodos)\n//   }\n\n//   const removeTodo = index => {\n//     const newTodos = [...todo]\n//     newTodos.splice(index, 1)\n//     setTodo(newTodos)\n//   }\n\n//   return (\n//     <>\n//     <div className=\"App\">            \n//         <button onClick={() => setCount(count + 1)}>{count}</button>\n\n//         <div className=\"todo-list\">\n//           {\n//             todo.map((item, index) => (\n//               <Todo \n//                 key={item.nKey}\n//                 index={index}\n//                 todo={item}\n//                 completeTodo={completeTodo}\n//                 removeTodo={removeTodo}\n//               />\n//             ))\n//           }\n//           <TodoForm addTodo={addTodo} />\n//         </div>      \n    \n//     </div>\n//     </>\n//   );\n// }\n\n// function App() {\n//   let temp = new LoadingCompoment();\n//   let temp2 = new Fast();\n//   var temp3 = new Timer();\n//   var timer = temp3  \n    \n//   //return temp;\n//   //return temp2;\n\n//   const data = [\n//     {\n//       title : 'Node',\n//       value : 0,    \n//     },\n//     {\n//       title : 'React',\n//       value : 1\n//     },\n//     {\n//       title : 'C#',\n//       value : 2\n//     }\n//   ]       \n  \n//   const handleClick = (param) => {\n//     //e.preventDefault();\n//     console.log(param);    \n//     console.log(timer.state.front)\n//     console.log(timer.value)\n\n//     timer.value = \"3\"\n//     timer.state.front = \"react.js\"\n//   }\n  \n//   const newHandleClick = (e) => {\n//     e.preventDefault();\n//     console.log(\"wrapper is clicked\");\n//   }   \n    \n//   //return timer.render()\n\n//   return (\n//     <>\n//     <div>          \n//     <button onClick={() => handleClick('test')}>this is a button</button>\n//     {      \n//       data.map((item, index)  => (\n//         <p key={item.value}>{item.title}, {item.value}, {index}</p>\n//       ))\n//     }    \n//     </div>           \n//     </>\n//   )\n\n// }\n\n/*\nfunction App() {\n  return (\n    <>\n      <head title=\"this is a title1\" />\n      <head title=\"this is a title2\" />\n    </>\n  );\n}\n*/\n\nexport default App;\n","import React from 'react';\r\n\r\nclass StopWatchDisplay extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={'stopwatch__display'}>\r\n        <span>\r\n          {this.props.formatTime(this.props.currentTimeMin)}:\r\n          {this.props.formatTime(this.props.currentTimeSec)}:\r\n          {this.props.formatTime(this.props.currentTimeMs, 'ms')}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StopWatchDisplay;\r\n","import React from 'react';\r\n\r\nclass StopWatchHistory extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      history: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setHistoryState();\r\n  }\r\n\r\n  setHistoryState = () => {\r\n    if (localStorage.times) {\r\n      this.setState({ history: localStorage.times.split('|') });\r\n    } else {\r\n      this.setState({ history: [] });\r\n    }\r\n  };\r\n\r\n  saveToLocalStorage = () => {\r\n    if (localStorage.times) {\r\n      localStorage.times =\r\n        `${Date().toString()} :: ${this.props.formatTime(\r\n          this.props.currentTimeMin\r\n        )}:${this.props.formatTime(\r\n          this.props.currentTimeSec\r\n        )}:${this.props.formatTime(this.props.currentTimeMs, 'ms')}|` +\r\n        localStorage.times;\r\n    } else {\r\n      localStorage.times = `${Date().toString()} :: ${this.props.formatTime(\r\n        this.props.currentTimeMin\r\n      )}:${this.props.formatTime(\r\n        this.props.currentTimeSec\r\n      )}:${this.props.formatTime(this.props.currentTimeMs, 'ms')}|`;\r\n    }\r\n  };\r\n\r\n  saveTime = () => {\r\n    if (typeof Storage !== 'undefined') {\r\n      this.saveToLocalStorage();\r\n    } else {\r\n      console.error('local storage not supported');\r\n    }\r\n    this.setHistoryState();\r\n  };\r\n\r\n  resetHistory = () => {\r\n    if (localStorage.times) {\r\n      localStorage.removeItem('times');\r\n    }\r\n    this.setHistoryState();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={'stopwatch__history'}>\r\n        <button onClick={this.saveTime}>SAVE TIME</button>\r\n        <button onClick={this.resetHistory}>RESET HISTORY</button>\r\n        <h3>History</h3>\r\n        <ul>\r\n          {this.state.history.map((item, index) => <li key={index}>{item}</li>)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StopWatchHistory;\r\n","import React, { useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport StopWatchDisplay from './StopWatchDisplay.jsx';\r\nimport StopWatchHistory from './StopWatchHistory.jsx';\r\n\r\n\r\nclass StopWatch extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        running: false,\r\n        currentTimeMs: 0,\r\n        currentTimeSec: 0,\r\n        currentTimeMin: 0,\r\n      };\r\n    }\r\n  \r\n    formatTime = (val, ...rest) => {\r\n      let value = val.toString();\r\n      if (value.length < 2) {\r\n        value = '0' + value;\r\n      }\r\n      if (rest[0] === 'ms' && value.length < 3) {\r\n        value = '0' + value;\r\n      }\r\n      return value;\r\n    };\r\n  \r\n    start = () => {\r\n      if (!this.state.running) {\r\n        this.setState({ running: true });\r\n        this.watch = setInterval(() => this.pace(), 10);\r\n      }\r\n    };\r\n  \r\n    stop = () => {\r\n      this.setState({ running: false });\r\n      clearInterval(this.watch);\r\n    };\r\n  \r\n    pace = () => {\r\n      this.setState({ currentTimeMs: this.state.currentTimeMs + 10 });\r\n      if (this.state.currentTimeMs >= 1000) {\r\n        this.setState({ currentTimeSec: this.state.currentTimeSec + 1 });\r\n        this.setState({ currentTimeMs: 0 });\r\n      }\r\n      if (this.state.currentTimeSec >= 60) {\r\n        this.setState({ currentTimeMin: this.state.currentTimeMin + 1 });\r\n        this.setState({ currentTimeSec: 0 });\r\n      }\r\n    };\r\n  \r\n    reset = () => {\r\n      this.setState({\r\n        currentTimeMs: 0,\r\n        currentTimeSec: 0,\r\n        currentTimeMin: 0,\r\n      });\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n        <div className={'stopwatch'}>\r\n          <h2 ref=\"header\">Stopwatch</h2>\r\n          {this.state.running === false && (\r\n            <button onClick={this.start}>START</button>\r\n          )}\r\n          {this.state.running === true && (\r\n            <button onClick={this.stop}>STOP</button>\r\n          )}\r\n          <button onClick={this.reset}>RESET</button>\r\n          <StopWatchDisplay\r\n          ref=\"display\"\r\n          {...this.state}\r\n          formatTime={this.formatTime}\r\n          />\r\n          <StopWatchHistory {...this.state} formatTime={this.formatTime} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\nexport default StopWatch;  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './StopWatch.css';\nimport App from './App';\nimport Timer from './class/Timer';\nimport StopWatch from './class/StopWatch';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />    \n\n    {/* <Timer /> */}\n\n    <StopWatch />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}